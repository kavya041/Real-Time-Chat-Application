:root{
  --bg:#0f1724;
  --card:#0b1220;
  --accent1: linear-gradient(135deg,#7c3aed,#06b6d4);
  --muted: #9aa7b2;
  --glass: rgba(255,255,255,0.03);
}

*{box-sizing:border-box}
html,body,#messages{height:100%}
body{
  margin:0;
  font-family:Inter,ui-sans-serif,system-ui,-apple-system,Segoe UI,Roboto,"Helvetica Neue",Arial;
  background: radial-gradient(1200px 600px at 10% 20%, rgba(34,197,94,0.06), transparent),
              linear-gradient(180deg,#071021 0%, #041022 100%);
  color:#e6eef6;
  -webkit-font-smoothing:antialiased;
  -moz-osx-font-smoothing:grayscale;
  min-height:100vh;
  display:flex;
  align-items:stretch;
  justify-content:center;
  padding:26px;
  gap:20px;
}

/* container */
.app{
  width:100%;
  max-width:1100px;
  height:calc(100vh - 52px);
  display:grid;
  grid-template-columns:300px 1fr;
  gap:18px;
}

/* sidebar */
.sidebar{
  background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));
  border-radius:14px;
  padding:18px;
  box-shadow: 0 8px 30px rgba(2,6,23,0.6);
  display:flex;
  flex-direction:column;
  gap:12px;
}
.brand{
  font-weight:700;
  letter-spacing:0.6px;
  font-size:20px;
  background:var(--accent1);
  -webkit-background-clip:text;
  background-clip:text;
  color:transparent;
}
.user-panel{
  display:flex;
  gap:12px;
  align-items:center;
}
.avatar{
  width:56px;height:56px;border-radius:12px;
  background:linear-gradient(135deg,#334155,#1e293b);
  display:flex;align-items:center;justify-content:center;font-weight:700;font-size:18px;
  color:#fff;box-shadow:0 6px 18px rgba(2,6,23,0.6);
}
.my-name{font-weight:600}
.btn{background:transparent;border:1px solid rgba(255,255,255,0.06);padding:6px 10px;border-radius:8px;color:var(--muted);cursor:pointer}
.btn.tiny{padding:6px 8px;font-size:12px}
.btn.alt{opacity:0.8}
.users-list{flex:1;overflow:auto;padding-top:6px}
.section-title{font-size:12px;color:var(--muted);margin-bottom:8px}
.users-list ul{list-style:none;padding:0;margin:0;display:flex;flex-direction:column;gap:6px}
.users-list li{display:flex;gap:8px;align-items:center;padding:8px;border-radius:10px;background:var(--glass);font-size:14px;color:#d9e6ef}
.credits{font-size:12px;color:var(--muted);text-align:center;padding-top:8px}

/* chat panel */
.chat{display:flex;flex-direction:column;background:linear-gradient(180deg, rgba(255,255,255,0.02), rgba(255,255,255,0.01));border-radius:14px;overflow:hidden}
.chat-header{padding:14px 18px;border-bottom:1px solid rgba(255,255,255,0.02);display:flex;justify-content:space-between;align-items:center}
.title{font-weight:700}
.typing{font-size:13px;color:var(--muted);opacity:0.95}

/* messages area */
.messages{
  padding:18px;
  overflow:auto;
  display:flex;
  flex-direction:column;
  gap:12px;
  background-image: radial-gradient(400px 200px at 90% 10%, rgba(56,189,248,0.02), transparent);
}

/* message bubbles */
.msg{
  max-width:78%;
  padding:10px 14px;
  border-radius:14px;
  box-shadow: 0 6px 18px rgba(2,6,23,0.45);
  line-height:1.25;
  animation: pop .15s ease-out;
}
.msg .meta{font-size:12px;color:var(--muted);margin-bottom:6px}
.msg.self{align-self:flex-end;background:linear-gradient(180deg,#0ea5a5,#0891b2);color:#042026;border-bottom-right-radius:6px}
.msg.other{align-self:flex-start;background:rgba(255,255,255,0.03);color:#e6eef6;border-bottom-left-radius:6px}
.msg.system{align-self:center;background:transparent;color:var(--muted);font-style:italic;padding:6px 10px;border-radius:8px;box-shadow:none}

/* composer */
.composer{
  display:flex;
  gap:10px;
  padding:12px;
  border-top:1px solid rgba(255,255,255,0.02);
  background:linear-gradient(180deg, rgba(255,255,255,0.01), transparent);
}
.composer input{
  flex:1;border:0;border-radius:12px;padding:12px 14px;font-size:15px;background:rgba(255,255,255,0.02);color:inherit;outline:none
}
.send-btn{
  background:linear-gradient(90deg,#7c3aed,#06b6d4);border:0;padding:10px 14px;border-radius:12px;color:#022;cursor:pointer;font-weight:700;box-shadow:0 6px 14px rgba(7,12,22,0.5)
}

/* modal */
.modal{position:fixed;inset:0;display:flex;align-items:center;justify-content:center;background:rgba(2,6,23,0.5);backdrop-filter:blur(3px)}
.modal.hidden{display:none}
.modal-card{background:linear-gradient(180deg,#051222,#072033);padding:20px;border-radius:12px;width:320px;box-shadow:0 14px 40px rgba(2,6,23,0.7)}
.modal-card h3{margin:0 0 12px}
.modal-actions{display:flex;gap:8px;justify-content:flex-end;margin-top:12px}

/* small animation */
@keyframes pop{from{transform:translateY(6px) scale(0.995);opacity:0}to{transform:none;opacity:1}}
@media (max-width:860px){
  .app{grid-template-columns:1fr; padding:12px; height:auto}
  .sidebar{display:none}
}

5) public/client.js
// client.js
const socket = io();

// UI refs
const messagesEl = document.getElementById('messages');
const composer = document.getElementById('composer');
const msgInput = document.getElementById('msgInput');
const usersEl = document.getElementById('users');
const typingEl = document.getElementById('typing');

const myNameEl = document.getElementById('myName');
const myAvatarEl = document.getElementById('myAvatar');
const changeNameBtn = document.getElementById('changeNameBtn');
const nameModal = document.getElementById('nameModal');
const nameInput = document.getElementById('nameInput');
const saveName = document.getElementById('saveName');
const cancelName = document.getElementById('cancelName');

let myName = localStorage.getItem('chat_name') || `User${Math.floor(Math.random()*900+100)}`;
myNameEl.textContent = myName;
myAvatarEl.textContent = (myName[0] || 'U').toUpperCase();

let typingTimeout = null;
let isTyping = false;

// show modal to change name
changeNameBtn.addEventListener('click', () => {
  nameInput.value = myName;
  nameModal.classList.remove('hidden');
  nameInput.focus();
});
cancelName.addEventListener('click', () => nameModal.classList.add('hidden'));
saveName.addEventListener('click', () => {
  const v = nameInput.value.trim();
  if (v) {
    myName = v.slice(0,32);
    localStorage.setItem('chat_name', myName);
    myNameEl.textContent = myName;
    myAvatarEl.textContent = (myName[0] || 'U').toUpperCase();
    nameModal.classList.add('hidden');
    socket.emit('join', myName); // announce changed name
  }
});

// init: when connected, join with name
socket.on('connect', () => {
  socket.emit('join', myName);
});

// initialize with history + users
socket.on('init', (data) => {
  // render history
  if (data && data.history && data.history.length) {
    data.history.forEach(renderMessage);
    // scroll to bottom
    scrollBottom();
  }
  if (data && data.users) renderUsers(data.users);
});

// users list update
socket.on('users', (list) => {
  renderUsers(list);
});

// new message
socket.on('message', (msg) => {
  renderMessage(msg);
  scrollBottom();
});

// typing indicator from others
socket.on('typing', ({ username, isTyping }) => {
  if (isTyping) {
    typingEl.textContent = `${username} is typing…`;
  } else {
    typingEl.textContent = '';
  }
});

// send message
composer.addEventListener('submit', (e) => {
  e.preventDefault();
  const text = msgInput.value.trim();
  if (!text) return;
  socket.emit('message', text);
  msgInput.value = '';
  // notify stopped typing
  notifyTyping(false);
});

// typing notifications with debounce
msgInput.addEventListener('input', () => {
  if (!isTyping) {
    isTyping = true;
    socket.emit('typing', true);
  }
  clearTimeout(typingTimeout);
  typingTimeout = setTimeout(() => {
    notifyTyping(false);
  }, 800);
});
function notifyTyping(flag) {
  isTyping = !!flag;
  socket.emit('typing', isTyping);
}

// render helper
function renderMessage(msg){
  const el = document.createElement('div');

  // system messages
  if (msg.system) {
    el.className = 'msg system';
    el.textContent = `${formatTime(msg.ts)} — ${msg.text}`;
    messagesEl.appendChild(el);
    return;
  }

  const me = (msg.user === myName);
  el.className = 'msg ' + (me ? 'self' : 'other');

  const meta = document.createElement('div');
  meta.className = 'meta';
  meta.textContent = `${msg.user} • ${formatTime(msg.ts)}`;

  const body = document.createElement('div');
  body.className = 'body';
  body.textContent = msg.text;

  el.appendChild(meta);
  el.appendChild(body);
  messagesEl.appendChild(el);
}

// render users
function renderUsers(list){
  usersEl.innerHTML = '';
  list.forEach(u => {
    const li = document.createElement('li');
    li.innerHTML = `<div class="avatar" style="width:34px;height:34px;border-radius:8px;font-size:13px">${(u[0]||'U').toUpperCase()}</div><div style="flex:1">${escapeHtml(u)}</div>`;
    usersEl.appendChild(li);
  });
}

// safe text
function escapeHtml(s){
  return s.replace(/[&<>"']/g, (m) => ({
    '&':'&amp;','<':'&lt;','>':'&gt;','"':'&quot;',"'":'&#39;'
  })[m]);
}

// scroll to bottom nicely
function scrollBottom(){
  messagesEl.scrollTo({ top: messagesEl.scrollHeight, behavior: 'smooth' });
}

function formatTime(ts){
  const d = new Date(ts || Date.now());
  return d.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
}
